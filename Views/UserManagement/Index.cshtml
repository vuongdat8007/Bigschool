@model Bigschool_TH_11.ViewModels.UserManagementViewModel
@{
    ViewBag.Title = "User Management";
    ViewBag.ActiveMenu = "IndexUserManagement";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <h2>User Management</h2>
    <hr />
    <div class="table-responsive">
        <table id="usersTable" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role ID</th>
                    <th>CBNV ID</th>
                    <th>Action</th>
                </tr>
            </thead>
        </table>
        <button type="button" class="btn btn-primary mb-3" data-toggle="modal" data-target="#createUserModal">Create New User</button>
    </div>

    <!-- Create User Modal -->
    <div class="modal fade" id="createUserModal" tabindex="-1" role="dialog" aria-labelledby="createUserModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createUserModalLabel">Create User</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="createUserForm">
                        <div class="form-group">
                            <label for="name">Name:</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="form-group">
                            <label for="password">Password:</label>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <div class="form-group">
                            <label for="confirmPassword">Confirm Password:</label>
                            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        </div>
                        <div class="form-group">
                            <label for="role">Role:</label>
                            <select class="form-control" id="role" name="role">
                                <option value="">Select Role</option>
                                @foreach (var role in Model.Roles)
                                {
                                    <option value="@role.Id">@role.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            @*<label for="cbnvId">CBNV ID:</label>
                                <input type="text" class="form-control" id="cbnvId" name="cbnvId">*@

                            <select class="form-control" id="cbnvId" name="cbnvId">
                                <option value="">Chọn CBNV để gắn với user này</option>
                                @foreach (var role in Model.CBNVs)
                                {
                                    <option value="@role.MaCBNV">@role.HoTen (@(role.ChucVu?.TenChucVu ?? "") - @(role.ChucVu?.QuyenTruyCap?.TenQuyen ?? ""))</option>
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" form="createUserForm" class="btn btn-primary">Create</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Update User Modal -->
    <div class="modal fade" id="updateUserModal" tabindex="-1" role="dialog" aria-labelledby="updateUserModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateUserModalLabel">Update User</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="updateUserForm">
                        <div class="form-group">
                            <label for="updateUserId">User ID:</label>
                            <input type="text" class="form-control text-danger" id="updateUserId" name="updateUserId"></input>
                        </div>
                        <div class="form-group">
                            <label for="updateName">Name:</label>
                            <input type="text" class="form-control" id="updateName" name="name" required>
                        </div>
                        <div class="form-group">
                            <label for="updateEmail">Email:</label>
                            <input type="email" class="form-control" id="updateEmail" name="email" required>
                        </div>
                        <div class="form-group">
                            <label for="updateRole">Role:</label>
                            <select class="form-control" id="updateRole" name="role">
                                <option value="">Select Role</option>
                                @foreach (var role in Model.Roles)
                                {
                                    <option value="@role.Id">@role.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            @*<label for="updateCbnvId">CBNV ID:</label>
                                <input type="text" class="form-control" id="updateCbnvId" name="cbnvId">*@
                            <select class="form-control" id="updateCbnvId" name="updateCbnvId">
                                <option value="">Chọn CBNV để gắn với user này</option>
                                @foreach (var role in Model.CBNVs)
                                {
                                    <option value="@role.MaCBNV">@role.HoTen (@(role.ChucVu?.TenChucVu ?? "") - @(role.ChucVu?.QuyenTruyCap?.TenQuyen ?? ""))</option>
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" form="updateUserForm" class="btn btn-primary">Update</button>
                </div>
            </div>
        </div>
    </div>

    @section scripts{
        <script>
            $(document).ready(function () {
                var table = $('#usersTable').DataTable({
                    ajax: {
                        url: '/api/usermanagementapi/users',
                        dataSrc: ''
                    },
                    dom: 'Blfrtip',
                    responsive: true,
                    columns: [
                        { data: 'Name' },
                        { data: 'Email' },
                        { data: 'Roles[0].RoleId' },
                        { data: 'CBNVId' },
                        /*{
                            data: 'CBNV',
                            render: function (data, type, row) {
                                return data ? data.HoTen : "";
                            }
                        },*/
                        {
                            data: 'Id',
                            render: function (data, type, row) {
                                return '<button class="btn btn-primary btn-sm" onclick="editUser(\'' + data + '\')">Edit</button>' +
                                    ' <button class="btn btn-danger btn-sm" onclick="deleteUser(\'' + data + '\')">Delete</button>';
                            }
                        }
                    ]
                });
                $('#createUserForm').validate({
                    rules: {
                        password: {
                            required: true,
                            minlength: 6
                        },
                        confirmPassword: {
                            required: true,
                            equalTo: '#password'
                        }
                    },
                    messages: {
                        password: {
                            required: 'Please enter a password',
                            minlength: 'Password must be at least 6 characters long'
                        },
                        confirmPassword: {
                            required: 'Please confirm your password',
                            equalTo: 'Passwords do not match'
                        }
                    },
                    submitHandler: function (form) {
                        var name = $('#name').val();
                        var email = $('#email').val();
                        var password = $('#password').val();
                        var role = $('#role').val();
                        var cbnvId = $('#cbnvId').val();

                        $.ajax({
                            url: '/api/usermanagementapi/CreateOrUpdateUser',
                            method: 'POST',
                            data: {
                                name: name,
                                email: email,
                                password: password,
                                role: role,
                                cbnvId: cbnvId
                            },
                            success: function () {
                                $('#createUserModal').modal('hide');
                                table.ajax.reload();
                                form.reset();
                            }
                        });
                    }
                });

                $('#updateUserForm').validate({
                    rules: {
                        password: {
                            minlength: 6
                        },
                        confirmPassword: {
                            equalTo: '#updatePassword'
                        }
                    },
                    messages: {
                        password: {
                            minlength: 'Password must be at least 6 characters long'
                        },
                        confirmPassword: {
                            equalTo: 'Passwords do not match'
                        }
                    },
                    submitHandler: function (form) {
                        var id = $('#updateUserId').val();
                        var name = $('#updateName').val();
                        var email = $('#updateEmail').val();
                        var password = $('#updatePassword').val();
                        var role = $('#updateRole').val();
                        var cbnvId = $('#updateCbnvId').val();

                        $.ajax({
                            url: '/api/usermanagementapi/CreateOrUpdateUser/' + id,
                            method: 'POST', // Should be PUT //TODO: Modify UserManagementApiController to accept PUT method for update user
                            data: {
                                name: name,
                                email: email,
                                userName: email,
                                password: password,
                                role: role,
                                cbnvId: cbnvId
                            },
                            success: function () {
                                $('#updateUserModal').modal('hide');
                                table.ajax.reload();
                            }
                        });
                    }
                });
            });

            function editUser(id) {
                $.ajax({
                    url: '/api/usermanagementapi/getuser/' + id,
                    method: 'GET',
                    success: function (user) {
                        $('#updateUserId').val(user.Id);
                        $('#updateName').val(user.Name);
                        $('#updateEmail').val(user.Email);
                        $('#updateRole').val(user.Roles[0]?.RoleId);
                        $('#updateCbnvId').val(user.CBNVId);

                        $('#updateUserModal').modal('show');
                    }
                });
            }

            function deleteUser(id) {
                if (confirm('Are you sure you want to delete this user?')) {
                    $.ajax({
                        url: '/api/usermanagementapi/deleteuser/' + id,
                        method: 'DELETE',
                        success: function () {
                            table.ajax.reload();
                        }
                    });
                }
            }
        </script>
    }
